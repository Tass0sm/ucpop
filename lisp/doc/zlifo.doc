             ZLIFO FLAW SELECTION STRATEGY FOR UCPOP      
             ---------------------------------------

             Alfonso Gerevini & Len Schubert (Sep.'95 )


GENERAL STRATEGY

ZLIFO chooses the next flaw according to the following preferences:
1. an actual threat (Dsep is on), using LIFO to pick among these;
2. an open condition that cannot be established in any way;
3. an open condition that can only be resolved in one way,
   preferring open conditions that can be established by introducing
   a new action to those that can be established by using *start*;
4. an open condition, using LIFO to pick among these.

2. and 3. are zero-commitment choices. In our experiments the
sub-preference in 3. gave improvements in the context of Russell's 
tire changing domain (in particular with 'fix3).


ZLIFO-SELECTION OF OPEN CONDITIONS (steps 2-4 of the general strategy)

Sketch of the main algorithm:

0.  Z-OC := nil; L-OC: nil; I-MATCHES:=0; S-MATCHES:=0 O-MATCHES:=0;
    {Z-OC and L-OC are variables that will be used to store selected 
     open conditions. In particular, Z-OC contains an open condition
     such that when this condition is processed it generates a 
     zero-commitment refinement; L-OC contains an open condition 
     selected using the LIFO strategy. The variables I-MATCHES, 
     S-MATCHES, O-MATCHES, will be used to count the number of 
     different ways of resolving an open condition};

1.  FOR EACH open cond. OC taken in LIFO-order from the list of flaws DO
      BEGIN

2.    I-MATCHES := number of (positive) conditions in the initial 
      state which match OC given the current set of binding constraints
      {if OC is a negated condition and it can be established by using 
       the closed world assumption, then count 1 match};

3.    S-MATCHES := number of effects of steps in the current plan 
      (excluding *start*) which match OC given the current set of 
      bindings constraints, and which can possibly be before the 
      step of OC;

4.    O-MATCHES := number of effects of operators matching OC
                  {Note that when S-MATCHES=1 S-MATCHES <= O-MATCHES}

5.    TOT-MATCHES := I-MATCHES + S-MATCHES + O-MATCHES; 

6.    IF TOT-MATCHES = 0 THEN RETURN OC   
         {we have found an open condition with zero matches, i.e. that 
          cannot be established in any way. When this (zero-commitment) 
          open condition is handled, the corresponding plan is pruned
          from the plan queue};

7.    IF TOP-MATCHES = 1 THEN

8.       IF Z-OC = nil THEN Z-OC := OC  
           {we have found a zero-commitment open condition but we don't 
            immediately return it because we could still find another
            better condition (i.e., a condition with zero matches)}

9.          ELSE {sub-preference among open conds with only one match}

10.              IF Z-OC is an open condition that can be established 
                    only by the initial state (initial action *start*), 
                    and OC can be established only by using an operator
                    (introducing a new action into the current plan) 
                 THEN Z-OC := OC;
                     
11.      ELSE {OC is not zero-commitment (TOT-MATCHES > 1)}

12.           IF L-OC = nil THEN  L-OC := OC 
                 {L-OC is bound to the open condition in the list
                  of the flaws satisfying the LIFO ordering}
      END{FOR}   

13. IF Z-OC = nil THEN RETURN L-OC ELSE RETURN Z-OC.
       {if we have found an OC with only one possible way of being 
        resolved, then this is returned; otherwise an open condition
        taken in LIFO order from the flaws list is returned.}


OPTIMIZATION NOTES

The current implementation of ZLIFO can be improved in some ways.  
In particular, there is no need to count ALL the initial conditions 
matching the OC (I-MATCHES). When we have found two matching initial
conditions, we can stop because we already know that the current OC is
NOT a zero-commitment choice. Furthermore, there is no need to compute 
S-MATCHES (steps 3) and O-MATCHES (step 4).

Moreover, we need to find at most 1 matching effect of steps in the
plan (S-MATCHES). In fact, if S-MATCHES = 1 TOT-MATCHES is greater 
than 1, since O-MATCHES >= S-MATCHES.

So, step 2 (S-MATCHES) needs to be computed only if I-MATCHES < 2, 
and step 4 (O-MATCHES) needs to be computed only if I-MATCHES < 2 AND
S-MATCHES = 0.


EXTENSIONS

We briefly experimented with the idea of giving zero-commitment
refinements higher priority than threats, but while this gave slight
improvements in plans created/explored, it increased CPU times because
of extra agenda-management costs.

We have also done some experiments testing the inclusion of Peot &
Smith's DUnf (delay unforced threats) strategy. It gave a general
(though not dramatic) improvement in terms of plans created/explored.


EXPERIMENTAL RESULTS

ZLIFO was originally integrated by A. Gerevini into UCPOP (VERSION 2.0),
and tested on a SUN 10 using Lucid CL version 4.0.0 and, more recently, 
Allegro CL 4.2.

Experimental results are given in: Accelerating Partial Order Planners
by Improving Plan and Goal Choices by Lenhart Schubert and Alfonso
Gerevini, to appear in Proc. of the Conference of Tools with
Artificial Intelligence, Nov. 1995.  
[Note that in all the experiments reported in this paper we used
UCPOP's bf-control search function, except for the Tower of Hanoi 
(1 operator, 3 disks), where with UCPOP's default plan&goal selection
strategies (S+OC+UC and LIFO) we used the function ibf-control.  The
reason for using ibf-control in this one case was that the trial runs
timed out completely with bf-control, using the SUN 10 and Lucid CL
4.0.0. Since then it has turned out that by using bf-control instead
of ibf-control, the same problem can actually be solved
generating/visiting fewer plans (46251/31060), but the planner remains
quite inefficient in terms of CPU-time (172.3 sec. on a SUN 20 --
experiment run by Colm O'riain, U.of Rochester).]
       
